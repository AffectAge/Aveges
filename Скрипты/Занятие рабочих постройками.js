function processEmployment(data, sheet, spreadsheet) {
  const messages = [];

  try {
    const templatesData = data['–ü–æ—Å—Ç—Ä–æ–π–∫–∏_–®–∞–±–ª–æ–Ω—ã'];
    const populationData = data['–ù–∞—Å–µ–ª–µ–Ω–∏–µ_–û—Å–Ω–æ–≤–Ω–∞—è–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'];
    const buildingsData = data['–ü–æ—Å—Ç—Ä–æ–π–∫–∏_–û—Å–Ω–æ–≤–Ω–∞—è–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'];
    const variablesData = data['–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ'];

    if (!templatesData || !populationData || !buildingsData || !variablesData) {
      const errMsg = '[‚ùå –û—à–∏–±–∫–∞] –û–¥–∏–Ω –∏–∑ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—É—Å—Ç.';
      messages.push(errMsg);
      console.log(errMsg);
      return messages;
    }

    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞
    let stateName;
    try {
      const targetRow = variablesData.find(row => row[0] === '–û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞');
      if (targetRow && targetRow[1]) {
        const jsonMatch = targetRow[1].match(/\{.*\}/);
        if (jsonMatch) {
          const variablesJson = JSON.parse(jsonMatch[0]);
          stateName = variablesJson.state_name;
          if (!stateName) {
            const errMsg = '[‚ùå –û—à–∏–±–∫–∞] –ö–ª—é—á "state_name" –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ".';
            messages.push(errMsg);
            console.log(errMsg);
            return messages;
          }
        } else {
          throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å JSON –∏–∑ "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ".');
        }
      } else {
        throw new Error('–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä "–û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞" –Ω–µ –Ω–∞–π–¥–µ–Ω.');
      }
      console.log(`üåê –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞: ${stateName}`);
    } catch (e) {
      const errMsg = `[‚ùå –û—à–∏–±–∫–∞] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ state_name: ${e.message}`;
      messages.push(errMsg);
      console.log(errMsg);
      return messages;
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É —Å –ø–æ—Å—Ç—Ä–æ–π–∫–∞–º–∏
    buildingsData.forEach((row, rowIndex) => {
      const cell = row[0];
      if (!cell) return;

      let buildingEntries;
      try {
        // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —è—á–µ–π–∫–∏ –∫–∞–∫ JSON
        const parsed = JSON.parse(cell);
        // –ï—Å–ª–∏ —ç—Ç–æ –º–∞—Å—Å–∏–≤ ‚Äì —Ä–∞–±–æ—Ç–∞–µ–º —Å –∫–∞–∂–¥—ã–º —ç–ª–µ–º–µ–Ω—Ç–æ–º,
        // –∏–Ω–∞—á–µ –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º –æ–¥–∏–Ω –æ–±—ä–µ–∫—Ç –≤ –º–∞—Å—Å–∏–≤
        buildingEntries = Array.isArray(parsed) ? parsed : [parsed];
      } catch (e) {
        const errMsg = `[‚ùå –û—à–∏–±–∫–∞] –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ—Å—Ç—Ä–æ–π–∫–∞—Ö –≤ —Å—Ç—Ä–æ–∫–µ ${rowIndex + 1}: ${e.message}`;
        messages.push(errMsg);
        console.log(errMsg);
        return;
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–≥–æ –∑–¥–∞–Ω–∏—è –∏–∑ —è—á–µ–π–∫–∏
      buildingEntries.forEach((building, index) => {
        console.log(`üèóÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–¥–∞–Ω–∏—è –≤ —Å—Ç—Ä–æ–∫–µ ${rowIndex + 1}, —ç–ª–µ–º–µ–Ω—Ç ${index + 1}: ${building.building_name}`);
        try {
          if (building.building_owner !== stateName || building.status !== "–ê–∫—Ç–∏–≤–Ω–∞—è") {
            console.log(`‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫ –∑–¥–∞–Ω–∏—è "${building.building_name}": –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–µ –∏–ª–∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –¥—Ä—É–≥–æ–º—É –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤—É.`);
            return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –∏–ª–∏ —á—É–∂–∏–µ –∑–¥–∞–Ω–∏—è
          }

          // –ò—â–µ–º —à–∞–±–ª–æ–Ω –ø–æ—Å—Ç—Ä–æ–π–∫–∏
          const template = templatesData.find(tRow => {
            const templateCell = tRow[0];
            if (!templateCell) return false;
            try {
              const templateObj = JSON.parse(templateCell);
              return templateObj.name === building.building_name;
            } catch {
              return false;
            }
          });

          if (!template) {
            const errMsg = `[‚ùå –û—à–∏–±–∫–∞] –®–∞–±–ª–æ–Ω –¥–ª—è –ø–æ—Å—Ç—Ä–æ–π–∫–∏ "${building.building_name}" –Ω–µ –Ω–∞–π–¥–µ–Ω.`;
            messages.push(errMsg);
            console.log(errMsg);
            return;
          }

          const templateObj = JSON.parse(template[0]);
          const requiredWorkers = templateObj.required_workers || 0;
          const requiredProfessions = templateObj.required_workers_professions || [];
          console.log(`üë∑ –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–∞–±–æ—á–∏—Ö: ${requiredWorkers} –¥–ª—è –ø–æ—Å—Ç—Ä–æ–π–∫–∏ "${building.building_name}"`);

          // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –Ω–∞—Å–µ–ª–µ–Ω–∏–∏ –ø—Ä–æ–≤–∏–Ω—Ü–∏–∏
          const provinceData = populationData.find(pRow => {
            const popCell = pRow[0];
            if (!popCell) return false;
            try {
              const popObj = JSON.parse(popCell);
              return popObj.province_id === building.province_id;
            } catch {
              return false;
            }
          });

          if (!provinceData) {
            const errMsg = `[‚ùå –û—à–∏–±–∫–∞] –î–∞–Ω–Ω—ã–µ –æ –Ω–∞—Å–µ–ª–µ–Ω–∏–∏ –¥–ª—è –ø—Ä–æ–≤–∏–Ω—Ü–∏–∏ "${building.province_id}" –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.`;
            messages.push(errMsg);
            console.log(errMsg);
            return;
          }

          const provincePopObj = JSON.parse(provinceData[0]);
          const availableWorkers = provincePopObj.unemployed_workers || 0;
          console.log(`üõ†Ô∏è –í –ø—Ä–æ–≤–∏–Ω—Ü–∏–∏ "${building.province_id}" –¥–æ—Å—Ç—É–ø–Ω–æ —Ä–∞–±–æ—á–∏—Ö: ${availableWorkers}`);

          if (availableWorkers < requiredWorkers) {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–¥–∞–Ω–∏—è –≤ –æ–±—ä–µ–∫—Ç–µ
            building.status = "–ù–µ–∞–∫—Ç–∏–≤–Ω–∞—è";
            const alertMsg = `[‚ö†Ô∏è –û–ø–æ–≤–µ—â–µ–Ω–∏–µ] –ü–æ—Å—Ç—Ä–æ–π–∫–∞ "${building.building_name}" –≤ –ø—Ä–æ–≤–∏–Ω—Ü–∏–∏ "${building.province_id}" –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –∏–∑-–∑–∞ –Ω–µ—Ö–≤–∞—Ç–∫–∏ —Ä–∞–±–æ—á–∏—Ö.`;
            messages.push(alertMsg);
            console.log(alertMsg);
            return;
          }

          // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä–∞–±–æ—á–µ–π —Å–∏–ª–µ
          provincePopObj.unemployed_workers -= requiredWorkers;
          provincePopObj.employed_workers += requiredWorkers;
          console.log(`üîÑ –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: –±–µ–∑—Ä–∞–±–æ—Ç–Ω—ã—Ö - ${provincePopObj.unemployed_workers}, –∑–∞–Ω—è—Ç—ã—Ö - ${provincePopObj.employed_workers}`);

          // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
          const professionsMap = provincePopObj.professions[0] || {};
          requiredProfessions.forEach(prof => {
            professionsMap[prof.profession] = (professionsMap[prof.profession] || 0) + prof.quantity;
            console.log(`üíº –î–æ–±–∞–≤–ª–µ–Ω–æ ${prof.quantity} —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ "${prof.profession}"`);
          });

          provincePopObj.professions[0] = professionsMap;
          populationData[populationData.indexOf(provinceData)][0] = JSON.stringify(provincePopObj);

          const successMsg = `[‚úÖ –£—Å–ø–µ—à–Ω–æ] –ü–æ—Å—Ç—Ä–æ–π–∫–∞ "${building.building_name}" –≤ –ø—Ä–æ–≤–∏–Ω—Ü–∏–∏ "${building.province_id}" –ø–æ–ª—É—á–∏–ª–∞ ${requiredWorkers} —Ä–∞–±–æ—á–∏—Ö.`;
          messages.push(successMsg);
          console.log(successMsg);
        } catch (e) {
          const errMsg = `[‚ùå –û—à–∏–±–∫–∞] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–¥–∞–Ω–∏—è –≤ —Å—Ç—Ä–æ–∫–µ ${rowIndex + 1}, —ç–ª–µ–º–µ–Ω—Ç ${index + 1}: ${e.message}`;
          messages.push(errMsg);
          console.log(errMsg);
        }
      });
      // –ü–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö –∑–¥–∞–Ω–∏–π –≤ —è—á–µ–π–∫–µ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      row[0] = JSON.stringify(buildingEntries);
      console.log(`üíæ –û–±–Ω–æ–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ ${rowIndex + 1}.`);
    });

    console.log('üìù –ò—Ç–æ–≥–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', messages);
    return messages;
  } catch (error) {
    const errMsg = `[‚ùå –û—à–∏–±–∫–∞] –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è processRequiredWorkers: ${error.message}`;
    messages.push(errMsg);
    console.log(errMsg);
    return messages;
  }
}
