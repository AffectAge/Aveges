/**
 * –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ state_required_buildings 
 * –≤ –ø–æ–Ω—è—Ç–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∏ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –ø–æ—Å—Ç—Ä–æ–µ–∫.
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã MIN_COUNT, MAX_COUNT, AND, OR, NOT, XNOR, IMPLIES.
 * @param {any} criteria - –ö—Ä–∏—Ç–µ—Ä–∏–π –∏–ª–∏ —É—Å–ª–æ–≤–∏–µ.
 * @returns {string} - –ß–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ.
 */
/**
 * –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ state_required_buildings 
 * –≤ –ø–æ–Ω—è—Ç–Ω–æ–µ –∏ ¬´–∂–∏–≤–æ–µ¬ª –æ–ø–∏—Å–∞–Ω–∏–µ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—ã—Ö —É—Å–ª–æ–≤–∏–π.
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã MIN_COUNT, MAX_COUNT, AND, OR, NOT, XNOR, IMPLIES.
 * @param {any} criteria - –ö—Ä–∏—Ç–µ—Ä–∏–π –∏–ª–∏ —É—Å–ª–æ–≤–∏–µ.
 * @returns {string} - –ß–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ.
 */
function formatStateCriteriaPretty(criteria) {
  if (typeof criteria !== "object" || criteria === null || Object.keys(criteria).length === 0) {
    return "";
  }
  
  let parts = [];
  
  for (const key in criteria) {
    if (!criteria.hasOwnProperty(key)) continue;
    const value = criteria[key];
    
    switch (key) {
      case "MIN_COUNT":
        if (typeof value === "object" && value !== null) {
          let reqs = [];
          for (const building in value) {
            if (value.hasOwnProperty(building)) {
              reqs.push(`—Ç—Ä–µ–±—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º üìä ${value[building]} üè≠ ${building}`);
            }
          }
          parts.push(reqs.join(" –∏ "));
        }
        break;
      
      case "MAX_COUNT":
        if (typeof value === "object" && value !== null) {
          let reqs = [];
          for (const building in value) {
            if (value.hasOwnProperty(building)) {
              reqs.push(`–Ω–µ –±–æ–ª–µ–µ üìä ${value[building]} üè≠ ${building}`);
            }
          }
          parts.push(reqs.join(" –∏ "));
        }
        break;
      
      case "AND":
        if (Array.isArray(value)) {
          let subparts = value
            .map(sub => formatStateCriteriaPretty(sub))
            .filter(x => x !== "");
          if (subparts.length > 0) {
            parts.push(subparts.join("\n ‚û§ "));
          }
        }
        break;
      
      case "OR":
        if (Array.isArray(value)) {
          let subparts = value
            .map(sub => formatStateCriteriaPretty(sub))
            .filter(x => x !== "");
          if (subparts.length > 0) {
            parts.push(`–ª–∏–±–æ ${subparts.join(" –∏–ª–∏ ")}`);
          }
        }
        break;
      
      case "NOT":
        if (Array.isArray(value)) {
          let subparts = value
            .map(sub => formatStateCriteriaPretty(sub))
            .filter(x => x !== "");
          if (subparts.length > 0) {
            parts.push(`–æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ ${subparts.join(" –∏–ª–∏ ")}`);
          }
        }
        break;
      
      case "XNOR":
        if (Array.isArray(value) && value.length === 2) {
          parts.push(`üè≠ ${value[0]} –∏ üè≠ ${value[1]} –¥–æ–ª–∂–Ω—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –ª–∏–±–æ –≤–º–µ—Å—Ç–µ, –ª–∏–±–æ –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤–º–µ—Å—Ç–µ`);
        }
        break;
      
      case "IMPLIES":
        if (Array.isArray(value) && value.length === 2) {
          parts.push(`–µ—Å–ª–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç üè≠ ${value[0]}, —Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å üè≠ ${value[1]}`);
        }
        break;
      
      default:
        parts.push(`${key}: ${JSON.stringify(value)}`);
    }
  }
  
  return parts.join("; ");
}



/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ —à–∞–±–ª–æ–Ω–∞—Ö –ø–æ—Å—Ç—Ä–æ–µ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ state_required_buildings
 * —Å –≤—ã–≤–æ–¥–æ–º –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è—Ö.
 * @param {Object} data - –û–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤
 * @param {Spreadsheet} spreadsheet - –û–±—ä–µ–∫—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
 * @returns {Array} newMessages - –ú–∞—Å—Å–∏–≤ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∂—É—Ä–Ω–∞–ª–∞
 */
function updateStateRequiredBuildings(data, spreadsheet) {
  let newMessages = [];

  try {
    // –ü–æ–ª—É—á–µ–Ω–∏–µ state_name –∏–∑ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    const variablesData = data['–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ'];
    if (!variablesData || variablesData.length === 0 || !variablesData[0][0]) {
      newMessages.push(`‚ùó [–û—à–∏–±–∫–∞][updateStateRequiredBuildings] –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—É—Å—Ç—ã –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –¥–∞–Ω–Ω—ã—Ö.`);
      return newMessages;
    }
    let stateName;
    try {
      const targetIdentifier = '–û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞';
      const targetRow = data['–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ'].find(row => row[0] === targetIdentifier);
      if (targetRow && targetRow[1]) {
        const jsonMatch = targetRow[1].match(/\{.*\}/);
        if (jsonMatch) {
          const variablesJson = JSON.parse(jsonMatch[0]);
          stateName = variablesJson.state_name;
          if (!stateName) {
            newMessages.push(`‚ùó [–û—à–∏–±–∫–∞][updateStateRequiredBuildings] –ö–ª—é—á "state_name" –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ.`);
            return newMessages;
          }
        } else {
          throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å JSON –∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ.');
        }
      } else {
        throw new Error(`–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä "${targetIdentifier}" –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ.`);
      }
    } catch (e) {
      newMessages.push(`‚ùó [–û—à–∏–±–∫–∞][updateStateRequiredBuildings] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ JSON –∏–∑ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: ${e.message}`);
      return newMessages;
    }
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –ø–∞—Ä—Å–∏–Ω–≥ –ø—Ä–æ–≤–∏–Ω—Ü–∏–π
    const provincesData = data['–ü—Ä–æ–≤–∏–Ω—Ü–∏–∏_–û—Å–Ω–æ–≤–Ω–∞—è–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'];
    if (!provincesData || provincesData.length === 0) {
      newMessages.push(`‚ùó [–û—à–∏–±–∫–∞][updateStateRequiredBuildings] –ü—Ä–æ–≤–∏–Ω—Ü–∏–∏_–û—Å–Ω–æ–≤–Ω–∞—è–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—É—Å—Ç—ã –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –¥–∞–Ω–Ω—ã—Ö.`);
      return newMessages;
    }
    const provinceMap = {};
    const stateProvinces = [];
    provincesData.forEach((row, index) => {
      const cell = row[0];
      if (cell) {
        try {
          const province = JSON.parse(cell);
          if (province.id && province.owner) {
            provinceMap[province.id] = province.owner;
            if (province.owner === stateName) {
              stateProvinces.push(province.id);
            }
          } else {
            newMessages.push(`‚ùó [–û—à–∏–±–∫–∞][updateStateRequiredBuildings] –ü—Ä–æ–≤–∏–Ω—Ü–∏—è (—Å—Ç—Ä–æ–∫–∞ ${index + 1}) –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç "id" –∏–ª–∏ "owner".`);
          }
        } catch (e) {
          newMessages.push(`‚ùó [–û—à–∏–±–∫–∞][updateStateRequiredBuildings] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –ü—Ä–æ–≤–∏–Ω—Ü–∏–∏_–û—Å–Ω–æ–≤–Ω–∞—è–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, —Å—Ç—Ä–æ–∫–∞ ${index + 1}: ${e.message}`);
        }
      }
    });
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å—Ç—Ä–æ–µ–∫ –∏ –ø–æ–¥—Å—á–µ—Ç –ø–æ —Ç–∏–ø–∞–º
    const buildingsData = data['–ü–æ—Å—Ç—Ä–æ–π–∫–∏_–û—Å–Ω–æ–≤–Ω–∞—è–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'];
    if (!buildingsData || buildingsData.length === 0) {
      newMessages.push(`‚ùó [–û—à–∏–±–∫–∞][updateStateRequiredBuildings] –ü–æ—Å—Ç—Ä–æ–π–∫–∏_–û—Å–Ω–æ–≤–Ω–∞—è–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—É—Å—Ç—ã –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –¥–∞–Ω–Ω—ã—Ö.`);
      return newMessages;
    }
    const buildingCounts = {};
    buildingsData.forEach((row, index) => {
      const cell = row[0];
      if (!cell) return;
      try {
        const parsedData = JSON.parse(cell);
        const buildingsArray = Array.isArray(parsedData) ? parsedData : [parsedData];
        buildingsArray.forEach((building, idx) => {
          const buildingName = building.building_name;
          const provinceId = building.province_id;
          if (!buildingName || !provinceId) {
            newMessages.push(`‚ùó [–û—à–∏–±–∫–∞][updateStateRequiredBuildings] –ü–æ—Å—Ç—Ä–æ–π–∫–∞ (—Å—Ç—Ä–æ–∫–∞ ${index + 1}, —ç–ª–µ–º–µ–Ω—Ç ${idx + 1}) –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç "building_name" –∏–ª–∏ "province_id".`);
            return;
          }
          if (provinceMap[provinceId] === stateName) {
            buildingCounts[buildingName] = (buildingCounts[buildingName] || 0) + 1;
          }
        });
      } catch (e) {
        newMessages.push(`‚ùó [–û—à–∏–±–∫–∞][updateStateRequiredBuildings] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –ü–æ—Å—Ç—Ä–æ–π–∫–∏_–û—Å–Ω–æ–≤–Ω–∞—è–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, —Å—Ç—Ä–æ–∫–∞ ${index + 1}: ${e.message}`);
      }
    });
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤ –ø–æ—Å—Ç—Ä–æ–µ–∫
    const templatesData = data['–ü–æ—Å—Ç—Ä–æ–π–∫–∏_–®–∞–±–ª–æ–Ω—ã'];
    if (!templatesData || templatesData.length === 0) {
      newMessages.push(`‚ùó [–û—à–∏–±–∫–∞][updateStateRequiredBuildings] –ü–æ—Å—Ç—Ä–æ–π–∫–∏_–®–∞–±–ª–æ–Ω—ã –ø—É—Å—Ç—ã –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –¥–∞–Ω–Ω—ã—Ö.`);
      return newMessages;
    }
    const templates = [];
    templatesData.forEach((row, index) => {
      const cell = row[0];
      if (cell) {
        try {
          const template = JSON.parse(cell);
          if (!template.name) {
            newMessages.push(`‚ùó [–û—à–∏–±–∫–∞][updateStateRequiredBuildings] –®–∞–±–ª–æ–Ω (—Å—Ç—Ä–æ–∫–∞ ${index + 1}) –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç "name".`);
            return;
          }
          if (!template.state_required_buildings) {
            newMessages.push(`‚ùó [–û—à–∏–±–∫–∞][updateStateRequiredBuildings] –®–∞–±–ª–æ–Ω "${template.name}" (—Å—Ç—Ä–æ–∫–∞ ${index + 1}) –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç "state_required_buildings".`);
            return;
          }
          if (!template.matching_provinces_state) {
            newMessages.push(`‚ùó [–û—à–∏–±–∫–∞][updateStateRequiredBuildings] –®–∞–±–ª–æ–Ω "${template.name}" (—Å—Ç—Ä–æ–∫–∞ ${index + 1}) –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç "matching_provinces_state".`);
            return;
          }
          if (!template.matching_provinces_others) {
            newMessages.push(`‚ùó [–û—à–∏–±–∫–∞][updateStateRequiredBuildings] –®–∞–±–ª–æ–Ω "${template.name}" (—Å—Ç—Ä–æ–∫–∞ ${index + 1}) –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç "matching_provinces_others".`);
            return;
          }
          templates.push({ data: template, row: index });
        } catch (e) {
          newMessages.push(`‚ùó [–û—à–∏–±–∫–∞][updateStateRequiredBuildings] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –ü–æ—Å—Ç—Ä–æ–π–∫–∏_–®–∞–±–ª–æ–Ω—ã, —Å—Ç—Ä–æ–∫–∞ ${index + 1}: ${e.message}`);
        }
      }
    });
    if (templates.length === 0) {
      newMessages.push(`‚ùó [–û—à–∏–±–∫–∞][updateStateRequiredBuildings] –ù–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –ü–æ—Å—Ç—Ä–æ–π–∫–∏_–®–∞–±–ª–æ–Ω—ã.`);
      return newMessages;
    }
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–≥–æ —à–∞–±–ª–æ–Ω–∞ —Å –≤—ã–≤–æ–¥–æ–º –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤
    templates.forEach(templateInfo => {
      const template = templateInfo.data;
      const templateName = template.name;
      const stateCriteria = template.state_required_buildings;
      if (typeof stateCriteria === 'object' && stateCriteria !== null && Object.keys(stateCriteria).length === 0) {
        newMessages.push(`‚úÖ [–ü–æ—Å—Ç—Ä–æ–π–∫–∏][–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ—Å—Ç—Ä–æ–π–∫–∏ –≤ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ] –ü–æ—Å—Ç—Ä–æ–π–∫–∞ üè≠ ${templateName} —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –Ω–∞–ª–∏—á–∏—è –ø–æ—Å—Ç—Ä–æ–µ–∫ –≤ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ —Ç–∞–∫ –∫–∞–∫ –∏—Ö —É –ø–æ—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ—Ç. \n`);
        return;
      }
      const isMatching = evaluateStateCriteria(stateCriteria, buildingCounts);
      const criteriaDescription = formatStateCriteriaPretty(stateCriteria);
      if (isMatching) {
        newMessages.push(`üèóÔ∏è [–ü–æ—Å—Ç—Ä–æ–π–∫–∏][–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ—Å—Ç—Ä–æ–π–∫–∏ –≤ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ] –ü–æ—Å—Ç—Ä–æ–π–∫–∞ üè≠ ${templateName} —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –Ω–∞–ª–∏—á–∏—è –ø–æ—Å—Ç—Ä–æ–µ–∫ –≤ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ ‚úÖ.`);
      } else {
        newMessages.push(`‚ùå [–ü–æ—Å—Ç—Ä–æ–π–∫–∏][–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ—Å—Ç—Ä–æ–π–∫–∏ –≤ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ] –®–∞–±–ª–æ–Ω üè≠ ${templateName} –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º: \n ‚û§ ${criteriaDescription} \n`);
        // –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ—á–∏—â–∞–µ–º —Å–ø–∏—Å–∫–∏ –ø—Ä–æ–≤–∏–Ω—Ü–∏–π
        if (template.matching_provinces_state && template.matching_provinces_state.length > 0) {
          const removedProvinces = template.matching_provinces_state.join(', ');
          template.matching_provinces_state = [];
          newMessages.push(`üó∫Ô∏è –ü—Ä–æ–≤–∏–Ω—Ü–∏–∏ –Ω–∞—à–µ–≥–æ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞ üìå ${removedProvinces} –±–æ–ª—å—à–µ –Ω–µ –ø–æ–¥—Ö–æ–¥—è—Ç –¥–ª—è –ø–æ—Å—Ç—Ä–æ–π–∫–∏ üè≠ ${templateName} üßπ.`);
        }
        if (template.matching_provinces_others && template.matching_provinces_others.length > 0) {
          const removedProvinces = template.matching_provinces_others.join(', ');
          template.matching_provinces_others = [];
          newMessages.push(`üåê –ü—Ä–æ–≤–∏–Ω—Ü–∏–∏ –¥—Ä—É–≥–∏—Ö —Å—Ç—Ä–∞–Ω üìå ${removedProvinces} –±–æ–ª—å—à–µ –Ω–µ –ø–æ–¥—Ö–æ–¥—è—Ç –¥–ª—è –ø–æ—Å—Ç—Ä–æ–π–∫–∏ üè≠ ${templateName} üßπ.`);
        }
        data['–ü–æ—Å—Ç—Ä–æ–π–∫–∏_–®–∞–±–ª–æ–Ω—ã'][templateInfo.row][0] = JSON.stringify(template);
      }
    });

  } catch (error) {
    newMessages.push(`üî• [–û—à–∏–±–∫–∞][updateStateRequiredBuildings] ${error.message}`);
  }
  return newMessages;
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞ –∫—Ä–∏—Ç–µ—Ä–∏—è–º
 * @param {Object} criteria - –ö—Ä–∏—Ç–µ—Ä–∏–∏ –∏–∑ state_required_buildings
 * @param {Object} buildingCounts - –û–±—ä–µ–∫—Ç —Å –æ–±—â–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–æ—Å—Ç—Ä–æ–µ–∫ –ø–æ —Ç–∏–ø–∞–º –≤–æ –≤—Å–µ—Ö –ø—Ä–æ–≤–∏–Ω—Ü–∏—è—Ö –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞
 * @returns {Boolean} - –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç true, –µ—Å–ª–∏ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã, –∏–Ω–∞—á–µ false
 */
function evaluateStateCriteria(criteria, buildingCounts) {
  if (typeof criteria !== 'object' || criteria === null) {
    return false;
  }
  if (Object.keys(criteria).length === 0) {
    return true;
  }
  for (const operator in criteria) {
    if (!criteria.hasOwnProperty(operator)) continue;
    const value = criteria[operator];
    switch (operator) {
      case 'AND':
        if (!Array.isArray(value)) return false;
        return value.every(subCriteria => evaluateStateCriteria(subCriteria, buildingCounts));
      case 'OR':
        if (!Array.isArray(value)) return false;
        return value.some(subCriteria => evaluateStateCriteria(subCriteria, buildingCounts));
      case 'NOT':
        if (!Array.isArray(value)) return false;
        return !value.some(subCriteria => evaluateStateCriteria(subCriteria, buildingCounts));
      case 'MIN_COUNT':
        if (typeof value !== 'object') return false;
        for (const building in value) {
          if (!value.hasOwnProperty(building)) continue;
          const minCount = value[building];
          if ((buildingCounts[building] || 0) < minCount) return false;
        }
        return true;
      case 'MAX_COUNT':
        if (typeof value !== 'object') return false;
        for (const building in value) {
          if (!value.hasOwnProperty(building)) continue;
          const maxCount = value[building];
          if ((buildingCounts[building] || 0) > maxCount) return false;
        }
        return true;
      case 'XNOR':
        if (!Array.isArray(value) || value.length !== 2) return false;
        {
          const [first, second] = value;
          const firstExists = (buildingCounts[first] || 0) > 0;
          const secondExists = (buildingCounts[second] || 0) > 0;
          return firstExists === secondExists;
        }
      case 'IMPLIES':
        if (!Array.isArray(value) || value.length !== 2) return false;
        {
          const [antecedent, consequent] = value;
          const antecedentExists = (buildingCounts[antecedent] || 0) > 0;
          const consequentExists = (buildingCounts[consequent] || 0) > 0;
          return !antecedentExists || consequentExists;
        }
      default:
        return false;
    }
  }
  return false;
}
