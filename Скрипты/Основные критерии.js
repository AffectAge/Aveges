/**
 * –ú–∞–ø–ø–∏–Ω–≥ –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ —Å —ç–º–æ–¥–∑–∏
 */
const CRITERIA_DETAILS = {
  required_landscapes: { label: "–ª–∞–Ω–¥—à–∞—Ñ—Ç–∞", emoji: "üèû" },
  required_planet: { label: "–ø–ª–∞–Ω–µ—Ç—ã", emoji: "ü™ê" },
  required_culture: { label: "–∫—É–ª—å—Ç—É—Ä—ã", emoji: "üé≠" },
  required_religion: { label: "—Ä–µ–ª–∏–≥–∏–∏", emoji: "üôè" },
  required_climate: { label: "–∫–ª–∏–º–∞—Ç–∞", emoji: "‚òÄÔ∏è" },
  required_radiation: { label: "—Ä–∞–¥–∏–∞—Ü–∏–∏", emoji: "‚ò¢Ô∏è" },
  required_pollution: { label: "–∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∏—è", emoji: "‚ôªÔ∏è" },
  required_stability: { label: "—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏", emoji: "‚öñÔ∏è" },
};

/**
 * –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç.
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–∞–∫ –ø—Ä–æ—Å—Ç—ã–µ, —Ç–∞–∫ –∏ –≤–ª–æ–∂–µ–Ω–Ω—ã–µ (–º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—ã–µ) –æ–±—ä–µ–∫—Ç—ã –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤.
 * @param {any} condition - –£—Å–ª–æ–≤–∏–µ (—Å—Ç—Ä–æ–∫–∞, —á–∏—Å–ª–æ –∏–ª–∏ –æ–±—ä–µ–∫—Ç —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º)
 * @returns {string} - –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —É—Å–ª–æ–≤–∏—è
 */
function formatCriteria(condition) {
  if (typeof condition === "string" || typeof condition === "number") {
    return condition.toString();
  }
  if (typeof condition === "object" && condition !== null) {
    const keys = Object.keys(condition);
    if (keys.length !== 1) {
      // –ï—Å–ª–∏ —É—Å–ª–æ–≤–∏–π –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–∞ –æ–¥–Ω–æ–º —É—Ä–æ–≤–Ω–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º JSON –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
      return JSON.stringify(condition);
    }
    const operator = keys[0].toUpperCase();
    const operand = condition[keys[0]];
    // –ï—Å–ª–∏ –æ–ø–µ—Ä–∞–Ω–¥ ‚Äî –º–∞—Å—Å–∏–≤, —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ
    if (Array.isArray(operand)) {
  // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–ª—É—á–∞–π –¥–ª—è BETWEEN —Å –¥–≤—É–º—è –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
  if (operator === "BETWEEN" && operand.length === 2) {
    return `–æ—Ç ${operand[0]} –¥–æ ${operand[1]}`;
  }

  const formattedOperands = operand.map(item => formatCriteria(item));
  switch (operator) {
    case "AND":
      return formattedOperands.join(" –∏ ");
    case "OR":
    case "XOR":
      return formattedOperands.join(" –∏–ª–∏ ");
    case "NOT":
      return "–Ω–µ " + formattedOperands[0];
    default:
      return operator + " " + formattedOperands.join(", ");
  }
} else {
      // –ï—Å–ª–∏ –æ–ø–µ—Ä–∞–Ω–¥ –Ω–µ –º–∞—Å—Å–∏–≤, —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –µ–≥–æ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ
      const formattedOperand = formatCriteria(operand);
      if (operator === "NOT") {
        return "–Ω–µ " + formattedOperand;
      } else if (operator === "GREATER_THAN") {
        return "–±–æ–ª—å—à–µ " + formattedOperand;
      } else if (operator === "LESS_THAN") {
        return "–º–µ–Ω—å—à–µ " + formattedOperand;
      } else if (operator === "EQUAL_TO") {
        return "—Ä–∞–≤–Ω–æ " + formattedOperand;
      } else if (operator === "GREATER_OR_EQUAL_TO") {
        return "–Ω–µ –º–µ–Ω—å—à–µ " + formattedOperand;
      } else if (operator === "LESS_OR_EQUAL_TO") {
        return "–Ω–µ –±–æ–ª—å—à–µ " + formattedOperand;
      } else if (operator === "BETWEEN" && Array.isArray(operand) && operand.length === 2) {
        return `–æ—Ç ${operand[0]} –¥–æ ${operand[1]}`;
      }
      return operator + " " + formattedOperand;
    }
  }
  return "";
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∫—Ä–∏—Ç–µ—Ä–∏—é —Å —ç–º–æ–¥–∑–∏.
 * –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è formatCriteria –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—ã—Ö —É—Å–ª–æ–≤–∏–π.
 * @param {Object} checkField - –æ–±—ä–µ–∫—Ç –∏–∑ CHECK_FIELDS
 * @param {Object} buildingCondition - —É—Å–ª–æ–≤–∏–µ –∏–∑ —à–∞–±–ª–æ–Ω–∞ –ø–æ—Å—Ç—Ä–æ–π–∫–∏
 * @param {any} provinceValue - –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –ø—Ä–æ–≤–∏–Ω—Ü–∏–∏
 * @returns {string} - –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∫—Ä–∏—Ç–µ—Ä–∏—è
 */
function generateDetailedReason(checkField, buildingCondition, provinceValue) {
  const detail = CRITERIA_DETAILS[checkField.buildingKey] || { label: checkField.buildingKey, emoji: "" };
  
  // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ª–æ–≤–∏—è
  const requiredText = formatCriteria(buildingCondition);
  const provinceText = Array.isArray(provinceValue) ? provinceValue.join(", ") : provinceValue;
  
  // –î–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º "–Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ", –¥–ª—è —á–∏—Å–ª–æ–≤—ã—Ö ‚Äî "–Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–µ–π"
  const adjective = checkField.evaluator === evaluateTextCriteria ? "‚û§ –ù–µ–ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –∫—Ä–∏—Ç–µ—Ä–∏—è" : "‚û§ –ù–µ–ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —É—Ä–æ–≤–Ω—è";
  
  return `${adjective} ${detail.emoji} ${detail.label} ( —Ç—Ä–µ–±—É–µ—Ç—Å—è: ${requiredText}, –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ: ${provinceText} )\n`;
}

/**
 * –ú–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
 */
const CHECK_FIELDS = [
  {
    buildingKey: 'required_landscapes', // –ö–ª—é—á –∏–∑ —à–∞–±–ª–æ–Ω–∞ –ø–æ—Å—Ç—Ä–æ–π–∫–∏
    provinceKey: 'landscapes',           // –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∫–ª—é—á –∏–∑ –ø—Ä–æ–≤–∏–Ω—Ü–∏–∏
    evaluator: evaluateTextCriteria      
  },
  {
    buildingKey: 'required_planet',     
    provinceKey: 'planet',               
    evaluator: evaluateTextCriteria  
  },
  {
    buildingKey: 'required_culture',     
    provinceKey: 'province_culture',               
    evaluator: evaluateTextCriteria  
  },
  {
    buildingKey: 'required_religion',     
    provinceKey: 'province_religion',               
    evaluator: evaluateTextCriteria  
  },
  {
    buildingKey: 'required_climate',     
    provinceKey: 'province_climate',               
    evaluator: evaluateTextCriteria  
  },
  {
    buildingKey: 'required_radiation',
    provinceKey: 'province_radiation',
    evaluator: evaluateNumberCriteria
  },
  {
    buildingKey: 'required_pollution',
    provinceKey: 'province_pollution',
    evaluator: evaluateNumberCriteria
  },
  {
    buildingKey: 'required_stability',
    provinceKey: 'province_stability',
    evaluator: evaluateNumberCriteria
  }
  // –î–æ–±–∞–≤–ª—è–π—Ç–µ –Ω–æ–≤—ã–µ —É—Å–ª–æ–≤–∏—è –ø–æ –º–µ—Ä–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
];

/**
 * –ú–∞—Å—Å–∏–≤ –∫–ª—é—á–µ–π –ø—Ä–æ–≤–∏–Ω—Ü–∏–∏, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏—Ö evaluateTextCriteria
 */
const TEXT_CRITERIA_KEYS = CHECK_FIELDS
  .filter(field => field.evaluator === evaluateTextCriteria)
  .map(field => field.provinceKey);

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON –¥–∞–Ω–Ω—ã—Ö —Å–æ–≥–ª–∞—Å–Ω–æ –∑–∞–¥–∞–Ω–∏—é
 * @param {Object} data - –û–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤
 * @param {Sheet} sheet - –ê–∫—Ç–∏–≤–Ω—ã–π –ª–∏—Å—Ç
 * @param {Spreadsheet} spreadsheet - –ê–∫—Ç–∏–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
 * @returns {Object} - –û–±—ä–µ–∫—Ç —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏ –Ω–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
 */
function processBuildingsCriterias(data, sheet, spreadsheet) {
  const variablesData = data['–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ'];
  const templatesData = data['–ü–æ—Å—Ç—Ä–æ–π–∫–∏_–®–∞–±–ª–æ–Ω—ã'];
  const provinceData = data['–ü—Ä–æ–≤–∏–Ω—Ü–∏–∏_–û—Å–Ω–æ–≤–Ω–∞—è–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'];
  
  let newMessages = []; // –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
  if (!variablesData || variablesData.length === 0 || !variablesData[0][0]) {
    const errorMsg = '–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö.';
    newMessages.push(`[–û—à–∏–±–∫–∞][processBuildingsCriterias] ${errorMsg}`);
    return newMessages; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
  }
  
  // –ü–∞—Ä—Å–∏–º JSON –∏–∑ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ –ø–æ–ª—É—á–∞–µ–º state_name
  let stateName;
  try {
    const targetIdentifier = '–û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞';
    
    // –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å –Ω—É–∂–Ω—ã–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º
    const targetRow = variablesData.find(row => row[0] === targetIdentifier);
    
    if (targetRow && targetRow[1]) {
      // –ò–∑–≤–ª–µ–∫–∞–µ–º JSON –∏–∑ –≤—Ç–æ—Ä–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞
      const jsonMatch = targetRow[1].match(/\{.*\}/);
      if (jsonMatch) {
        const range1Json = JSON.parse(jsonMatch[0]);
        stateName = range1Json.state_name;
        
        if (!stateName) {
          const errorMsg = '–ö–ª—é—á "state_name" –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ.';
          newMessages.push(`[–û—à–∏–±–∫–∞][processBuildingsCriterias] ${errorMsg}`);
          return newMessages;
        }
      } else {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å JSON –∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ.');
      }
    } else {
      throw new Error(`–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä "${targetIdentifier}" –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ.`);
    }
  } catch (e) {
    const errorMsg = `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ JSON –∏–∑ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: ${e.message}`;
    newMessages.push(`[–û—à–∏–±–∫–∞][processBuildingsCriterias] ${errorMsg}`);
    return newMessages;
  }
  
  // –ü–∞—Ä—Å–∏–º –≤—Å–µ JSON –∏–∑ –ü–æ—Å—Ç—Ä–æ–π–∫–∏_–®–∞–±–ª–æ–Ω—ã (—à–∞–±–ª–æ–Ω—ã) –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ owner
  const templates = [];
  for (let i = 0; i < templatesData.length; i++) {
    const cell = templatesData[i][0];
    if (cell) {
      try {
        const template = JSON.parse(cell);
        templates.push({ 
          data: template, 
          row: i 
        });
      } catch (e) {
        const errorMsg = `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ JSON –∏–∑ –ü–æ—Å—Ç—Ä–æ–π–∫–∏_–®–∞–±–ª–æ–Ω—ã, —Å—Ç—Ä–æ–∫–∞ ${i+1}: ${e.message}`;
        newMessages.push(`[–û—à–∏–±–∫–∞][processBuildingsCriterias] ${errorMsg}`);
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
      }
    }
  }
  
  if (templates.length === 0) {
    const errorMsg = '–ù–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤ –≤ –ü–æ—Å—Ç—Ä–æ–π–∫–∏_–®–∞–±–ª–æ–Ω—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.';
    newMessages.push(`[–û—à–∏–±–∫–∞][processBuildingsCriterias] ${errorMsg}`);
    return newMessages;
  }
  
  // –ü–∞—Ä—Å–∏–º –≤—Å–µ JSON –∏–∑ –ü—Ä–æ–≤–∏–Ω—Ü–∏–∏_–û—Å–Ω–æ–≤–Ω–∞—è–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ —Å–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É id -> province
  const provinceMap = {};
  const allProvinces = [];
  for (let i = 0; i < provinceData.length; i++) {
    const cell = provinceData[i][0];
    if (cell) {
      try {
        let jsonString = cell;
        
        // –£–¥–∞–ª—è–µ–º –≤–Ω–µ—à–Ω–∏–µ –∫–∞–≤—ã—á–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if (jsonString.startsWith('"') && jsonString.endsWith('"')) {
          jsonString = jsonString.slice(1, -1);
        }   
        
        const province = JSON.parse(jsonString);
        if (province.id) {
          // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –ø–æ–ª–µ–π, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏—Ö evaluateTextCriteria
          TEXT_CRITERIA_KEYS.forEach(key => {
            if (province[key]) {
              if (typeof province[key] === 'string') {
                province[key] = province[key].split(',').map(item => item.trim());
              }
              // –ï—Å–ª–∏ –ø–æ–ª–µ —É–∂–µ –º–∞—Å—Å–∏–≤, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
            }
          });
          
          // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º available_resources –≤ –º–∞—Å—Å–∏–≤, –µ—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
          if (province.available_resources && typeof province.available_resources === 'string') {
            province.available_resources = province.available_resources.split(',').map(item => item.trim());
          }
          
          provinceMap[province.id] = province;
          allProvinces.push(province);
        }
      } catch (e) {
        const errorMsg = `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ JSON –∏–∑ –ü—Ä–æ–≤–∏–Ω—Ü–∏–∏_–û—Å–Ω–æ–≤–Ω–∞—è–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, —Å—Ç—Ä–æ–∫–∞ ${i+1}: ${e.message}`;
        newMessages.push(`[–û—à–∏–±–∫–∞][processBuildingsCriterias] ${errorMsg}`);
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
      }
    }
  }
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —à–∞–±–ª–æ–Ω
  templates.forEach(templateInfo => {
    const template = templateInfo.data;
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤—ã –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–æ–≤–∏–Ω—Ü–∏–π
    const matchingProvincesState = [];
    const matchingProvincesOthers = [];
    const nonMatchingProvincesDetails = [];
    
    // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–π –ø—Ä–æ–≤–∏–Ω—Ü–∏–∏ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º —Å–±–æ—Ä–æ–º –ø—Ä–∏—á–∏–Ω
    allProvinces.forEach(province => {
      let allConditionsMet = true;
      let failureReasons = [];
      
      CHECK_FIELDS.forEach(checkField => {
        const buildingCondition = template[checkField.buildingKey];
        const provinceValue = province[checkField.provinceKey];
        
        if (buildingCondition !== undefined && buildingCondition !== null) {
          const result = checkField.evaluator(buildingCondition, provinceValue);
          
          if (!result) {
            allConditionsMet = false;
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—é
            const reasonMsg = generateDetailedReason(checkField, buildingCondition, provinceValue);
            failureReasons.push(reasonMsg);
          }
        }
      });
      
      if (allConditionsMet) {
        if (province.owner === stateName) {
          matchingProvincesState.push(province.id);
        } else {
          matchingProvincesOthers.push(province.id);
        }
      } else {
        nonMatchingProvincesDetails.push({ province, failureReasons });
      }
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —à–∞–±–ª–æ–Ω
    template.matching_provinces_state = matchingProvincesState;
    template.matching_provinces_others = matchingProvincesOthers;
    template.allowed_building_state = matchingProvincesState;
    template.allowed_building_others = matchingProvincesOthers;
    
    const constructionName = template.name ? `${template.name}` : `"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"`;
    const constructionOwner = template.owner ? `${template.owner}` : `"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"`;
    
    if (matchingProvincesState.length > 0 || matchingProvincesOthers.length > 0) {
      // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø—Ä–æ–≤–∏–Ω—Ü–∏–∏, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö
      newMessages.push(`[–û—Å–Ω–æ–≤–Ω—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ—Å—Ç—Ä–æ–µ–∫] \nüèóÔ∏è –ü–æ—Å—Ç—Ä–æ–π–∫–∞ üè≠ ${constructionName} –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ø—Ä–æ–≤–∏–Ω—Ü–∏–π:\n`);
      
      if (matchingProvincesState.length > 0) {
        const provincesStateList = matchingProvincesState.join(', ');
        newMessages.push(`[–û—Å–Ω–æ–≤–Ω—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ—Å—Ç—Ä–æ–µ–∫] \n‚úÖ –ù–∞—à–µ–≥–æ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞: ${provincesStateList}.\n`);
      }
      
      if (matchingProvincesOthers.length > 0) {
        const provincesOthersList = matchingProvincesOthers.join(', ');
        newMessages.push(`[–û—Å–Ω–æ–≤–Ω—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ—Å—Ç—Ä–æ–µ–∫] \n‚úÖ –î—Ä—É–≥–∏—Ö –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤: ${provincesOthersList}.\n`);
      }
    }
    
    // –ï—Å–ª–∏ –Ω–∏ –æ–¥–Ω–∞ –ø—Ä–æ–≤–∏–Ω—Ü–∏—è –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –ø—Ä–æ–≤–∏–Ω—Ü–∏–∏
    if (matchingProvincesState.length === 0 && matchingProvincesOthers.length === 0) {
      nonMatchingProvincesDetails.forEach(detail => {
        const province = detail.province;
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º province.name, –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ id
        const provinceIdentifier = province.name ? province.name : province.id;
        const reasonsText = detail.failureReasons.join("");
        newMessages.push(`[–û—Å–Ω–æ–≤–Ω—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ—Å—Ç—Ä–æ–µ–∫] \n–ü—Ä–æ–≤–∏–Ω—Ü–∏—è üìå ${provinceIdentifier} –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ø–æ—Å—Ç—Ä–æ–π–∫–∏ üè≠ ${constructionName} –∏–∑-–∑–∞: \n ${reasonsText}`);
      });
    }
    
    // –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω –æ–±—Ä–∞—Ç–Ω–æ –≤ JSON
    data['–ü–æ—Å—Ç—Ä–æ–π–∫–∏_–®–∞–±–ª–æ–Ω—ã'][templateInfo.row][0] = JSON.stringify(template);
  });
  
  return newMessages;
}

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —É—Å–ª–æ–≤–∏–π –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –º–∞—Å—Å–∏–≤–∞ –∑–Ω–∞—á–µ–Ω–∏–π –ø—Ä–æ–≤–∏–Ω—Ü–∏–∏
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã AND, OR, NOT, XOR, NAND, NOR
 * @param {Object} required - –û–±—ä–µ–∫—Ç —Å –ª–æ–≥–∏—á–µ—Å–∫–∏–º–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º–∏
 * @param {Array} provinceValues - –ú–∞—Å—Å–∏–≤ –∑–Ω–∞—á–µ–Ω–∏–π –ø—Ä–æ–≤–∏–Ω—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, landscapes, planet –∏ —Ç.–¥.)
 * @returns {boolean} - –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ü–µ–Ω–∫–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
 */
function evaluateTextCriteria(required, provinceValues) {
  if (!required || typeof required !== 'object') {
    return false;
  }
  
  // –ï—Å–ª–∏ –æ–±—ä–µ–∫—Ç –ø—É—Å—Ç–æ–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º true (–æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π)
  if (Object.keys(required).length === 0) {
    return true;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ provinceValues —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º
  if (!Array.isArray(provinceValues)) {
    return false;
  }
  
  // –ü—Ä–∏–≤–æ–¥–∏–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã provinceValues –∫ –≤–µ—Ä—Ö–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –∏ –æ–±—Ä–µ–∑–∞–µ–º –ø—Ä–æ–±–µ–ª—ã
  const normalizedValues = provinceValues.map(v => v.trim().toUpperCase());
  
  // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ required —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä –Ω–∞ —É—Ä–æ–≤–Ω–µ –æ–±—ä–µ–∫—Ç–∞
  const operators = Object.keys(required);
  if (operators.length !== 1) {
    return false;
  }
  
  const operator = operators[0].toUpperCase();
  const operands = required[operators[0]];
  
  switch (operator) {
    case 'AND':
      // –í—Å–µ –æ–ø–µ—Ä–∞–Ω–¥—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∏—Å—Ç–∏–Ω–Ω—ã–º–∏
      return operands.every(item => {
        if (typeof item === 'string') {
          return normalizedValues.includes(item.toUpperCase());
        } else if (typeof item === 'object') {
          return evaluateTextCriteria(item, provinceValues);
        }
        return false;
      });
      
    case 'OR':
      // –•–æ—Ç—è –±—ã –æ–¥–∏–Ω –æ–ø–µ—Ä–∞–Ω–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏—Å—Ç–∏–Ω–Ω—ã–º
      return operands.some(item => {
        if (typeof item === 'string') {
          return normalizedValues.includes(item.toUpperCase());
        } else if (typeof item === 'object') {
          return evaluateTextCriteria(item, provinceValues);
        }
        return false;
      });
      
    case 'NOT':
      // –û–¥–∏–Ω –æ–ø–µ—Ä–∞–Ω–¥, –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ª–æ–∂–Ω—ã–º
      if (!Array.isArray(operands) || operands.length !== 1) {
        return false;
      }
      const operandNot = operands[0];
      if (typeof operandNot === 'string') {
        return !normalizedValues.includes(operandNot.toUpperCase());
      } else if (typeof operandNot === 'object') {
        return !evaluateTextCriteria(operandNot, provinceValues);
      }
      return false;
      
    case 'XOR':
      // –¢—Ä–µ–±—É–µ—Ç—Å—è, —á—Ç–æ–±—ã —Ä–æ–≤–Ω–æ –æ–¥–∏–Ω –æ–ø–µ—Ä–∞–Ω–¥ –±—ã–ª –∏—Å—Ç–∏–Ω–Ω—ã–º
      let trueCount = 0;
      operands.forEach(item => {
        if (typeof item === 'string') {
          if (normalizedValues.includes(item.toUpperCase())) {
            trueCount += 1;
          }
        } else if (typeof item === 'object') {
          if (evaluateTextCriteria(item, provinceValues)) {
            trueCount += 1;
          }
        }
      });
      return (trueCount === 1);
      
    case 'NAND':
      // NAND = NOT (AND)
      const andResult = operands.every(item => {
        if (typeof item === 'string') {
          return normalizedValues.includes(item.toUpperCase());
        } else if (typeof item === 'object') {
          return evaluateTextCriteria(item, provinceValues);
        }
        return false;
      });
      return !andResult;
      
    case 'NOR':
      // NOR = NOT (OR)
      const orResult = operands.some(item => {
        if (typeof item === 'string') {
          return normalizedValues.includes(item.toUpperCase());
        } else if (typeof item === 'object') {
          return evaluateTextCriteria(item, provinceValues);
        }
        return false;
      });
      return !orResult;
      
    default:
      return false;
  }
}

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —á–∏—Å–ª–æ–≤—ã—Ö —É—Å–ª–æ–≤–∏–π
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã GREATER_THAN, LESS_THAN, EQUAL_TO, GREATER_OR_EQUAL_TO, LESS_OR_EQUAL_TO, BETWEEN
 * @param {Object} required - –û–±—ä–µ–∫—Ç —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º –∏ –æ–ø–µ—Ä–∞–Ω–¥–æ–º(–∞–º–∏)
 * @param {number} current - –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è –ø—Ä–æ–≤–∏–Ω—Ü–∏–∏
 * @param {string} fieldName - –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
 * @returns {boolean} - –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ü–µ–Ω–∫–∏ —É—Å–ª–æ–≤–∏—è
 */
function evaluateNumberCriteria(required, current, fieldName) {
  if (!required || typeof required !== 'object') {
    return false;
  }
  
  // –ï—Å–ª–∏ –æ–±—ä–µ–∫—Ç –ø—É—Å—Ç–æ–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º true (–æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π)
  if (Object.keys(required).length === 0) {
    return true;
  }
  
  const operators = Object.keys(required);
  if (operators.length !== 1) {
    return false;
  }
  
  const operator = operators[0].toUpperCase();
  const operand = required[operators[0]];
  
  switch (operator) {
    case 'GREATER_THAN':
      return current > operand;
    case 'LESS_THAN':
      return current < operand;
    case 'EQUAL_TO':
      return current === operand;
    case 'GREATER_OR_EQUAL_TO':
      return current >= operand;
    case 'LESS_OR_EQUAL_TO':
      return current <= operand;
    case 'BETWEEN':
      if (Array.isArray(operand) && operand.length === 2) {
        const [min, max] = operand;
        return current >= min && current <= max;
      } else {
        return false;
      }
    // –î–æ–±–∞–≤—å—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    default:
      return false;
  }
}