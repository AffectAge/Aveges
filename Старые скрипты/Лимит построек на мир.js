/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ—Å—Ç—Ä–æ–µ–∫ –ø–æ –º–∏—Ä–æ–≤–æ–º—É –ª–∏–º–∏—Ç—É
 * @param {Object} data - –û–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤
 * @param {Sheet} sheet - –ê–∫—Ç–∏–≤–Ω—ã–π –ª–∏—Å—Ç
 * @param {Spreadsheet} spreadsheet - –ê–∫—Ç–∏–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
 * @returns {Array} newMessages - –ú–∞—Å—Å–∏–≤ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∂—É—Ä–Ω–∞–ª–∞
 */
function processWorldLimits(data, sheet, spreadsheet) {
  let newMessages = [];
  
  try {
    // 1. –ü–æ–ª—É—á–µ–Ω–∏–µ state_name –∏–∑ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    const variablesData = data['–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ'];
    if (!variablesData || variablesData.length === 0 || !variablesData[0][0]) {
      newMessages.push(`‚ùó [–û—à–∏–±–∫–∞][processWorldLimits] –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö.`);
      return newMessages;
    }
    
    // 1. –ü–æ–ª—É—á–µ–Ω–∏–µ state_name –∏–∑ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let stateName;
try {
  const targetIdentifier = '–û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞';
  
  // –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å –Ω—É–∂–Ω—ã–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º
  const targetRow = data['–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ'].find(row => row[0] === targetIdentifier);
  
  if (targetRow && targetRow[1]) {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º JSON –∏–∑ –≤—Ç–æ—Ä–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞
    const jsonMatch = targetRow[1].match(/\{.*\}/);
    if (jsonMatch) {
      const variablesJson = JSON.parse(jsonMatch[0]);
      stateName = variablesJson.state_name;
      
      if (!stateName) {
        newMessages.push(`‚ùó [–û—à–∏–±–∫–∞][processWorldLimits] –ö–ª—é—á "state_name" –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ.`);
        return newMessages;
      }
    } else {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å JSON –∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ.');
    }
  } else {
    throw new Error(`–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä "${targetIdentifier}" –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ.`);
  }
} catch (e) {
  newMessages.push(`‚ùó [–û—à–∏–±–∫–∞][processWorldLimits] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ JSON –∏–∑ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: ${e.message}`);
  return newMessages;
}
    
    // 2. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–≤–∏–Ω—Ü–∏–π
    const provincesData = data['–ü—Ä–æ–≤–∏–Ω—Ü–∏–∏_–û—Å–Ω–æ–≤–Ω–∞—è–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'];
    if (!provincesData || provincesData.length === 0) {
      newMessages.push(`‚ùó [–û—à–∏–±–∫–∞][processWorldLimits] –ü—Ä–æ–≤–∏–Ω—Ü–∏–∏_–û—Å–Ω–æ–≤–Ω–∞—è–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö.`);
      return newMessages;
    }
    
    // –ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–æ–≤–∏–Ω—Ü–∏–π
    const provinceMap = {}; // id -> owner
    provincesData.forEach((row, index) => {
      const cell = row[0];
      if (cell) {
        try {
          let jsonString = cell;
          
          // –£–¥–∞–ª—è–µ–º –≤–Ω–µ—à–Ω–∏–µ –∫–∞–≤—ã—á–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
          if (jsonString.startsWith('"') && jsonString.endsWith('"')) {
            jsonString = jsonString.slice(1, -1);
          }
          
          // –ó–∞–º–µ–Ω—è–µ–º –¥–≤–æ–π–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –Ω–∞ –æ–¥–∏–Ω–∞—Ä–Ω—ã–µ
          jsonString = jsonString.replace(/""/g, '"');
          
          const province = JSON.parse(jsonString);
          if (province.id && province.owner) {
            provinceMap[province.id] = province.owner;
          } else {
            newMessages.push(`‚ùó [–û—à–∏–±–∫–∞][processWorldLimits] –ü—Ä–æ–≤–∏–Ω—Ü–∏—è –≤ —Å—Ç—Ä–æ–∫–µ ${index + 1} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–µ–π "id" –∏–ª–∏ "owner".`);
          }
        } catch (e) {
          newMessages.push(`‚ùó [–û—à–∏–±–∫–∞][processWorldLimits] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ JSON –∏–∑ –ü—Ä–æ–≤–∏–Ω—Ü–∏–∏_–û—Å–Ω–æ–≤–Ω–∞—è–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, —Å—Ç—Ä–æ–∫–∞ ${index + 1}: ${e.message}`);
        }
      }
    });
    
    // 3. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–∫
    const buildingsData = data['–ü–æ—Å—Ç—Ä–æ–π–∫–∏_–û—Å–Ω–æ–≤–Ω–∞—è–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'];
    if (!buildingsData || buildingsData.length === 0) {
      newMessages.push(`‚ùó [–û—à–∏–±–∫–∞][processWorldLimits] –ü–æ—Å—Ç—Ä–æ–π–∫–∏_–û—Å–Ω–æ–≤–Ω–∞—è–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö.`);
      return newMessages;
    }
    
    // –ü–æ–¥—Å—á–µ—Ç –ø–æ—Å—Ç—Ä–æ–µ–∫ –≤ –º–∏—Ä–µ
    // –°—Ç—Ä—É–∫—Ç—É—Ä–∞: { building_name: count }
    const buildingCounts = {};
    buildingsData.forEach((row, index) => {
      const cell = row[0];
      if (cell) {
        try {
          const parsedData = JSON.parse(cell);
          
          // **–ò–∑–º–µ–Ω–µ–Ω–∏–µ: –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∑–¥–∞–Ω–∏–π –≤ –æ–¥–Ω–æ–π —è—á–µ–π–∫–µ**
          const buildingsArray = Array.isArray(parsedData) ? parsedData : [parsedData];
          
          buildingsArray.forEach((building, bIndex) => {
            const buildingName = building.building_name;
            const provinceId = building.province_id;
            
            if (!buildingName || !provinceId) {
              newMessages.push(`‚ùó [–û—à–∏–±–∫–∞][processWorldLimits] –ó–¥–∞–Ω–∏–µ –≤ —Å—Ç—Ä–æ–∫–µ ${index + 1}, —ç–ª–µ–º–µ–Ω—Ç ${bIndex + 1} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–∏ "building_name" –∏–ª–∏ "province_id".`);
              return;
            }
            
            if (!buildingCounts[buildingName]) {
              buildingCounts[buildingName] = 0;
            }
            
            buildingCounts[buildingName] += 1;
          });
          // **–ö–æ–Ω–µ—Ü –∏–∑–º–µ–Ω–µ–Ω–∏—è**
        } catch (e) {
          newMessages.push(`‚ùó [–û—à–∏–±–∫–∞][processWorldLimits] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ JSON –∏–∑ –ü–æ—Å—Ç—Ä–æ–π–∫–∏_–û—Å–Ω–æ–≤–Ω–∞—è–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, —Å—Ç—Ä–æ–∫–∞ ${index + 1}: ${e.message}`);
        }
      }
    });
    
    // 4. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤ –ø–æ—Å—Ç—Ä–æ–µ–∫
    const templatesData = data['–ü–æ—Å—Ç—Ä–æ–π–∫–∏_–®–∞–±–ª–æ–Ω—ã'];
    if (!templatesData || templatesData.length === 0) {
      newMessages.push(`‚ùó [–û—à–∏–±–∫–∞][processWorldLimits] –ü–æ—Å—Ç—Ä–æ–π–∫–∏_–®–∞–±–ª–æ–Ω—ã –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö.`);
      return newMessages;
    }
    
    // –ü–∞—Ä—Å–∏–Ω–≥ —à–∞–±–ª–æ–Ω–æ–≤
    const templates = []; // { data: templateObject, row: rowIndex }
    templatesData.forEach((row, index) => {
      const cell = row[0];
      if (cell) {
        try {
          const template = JSON.parse(cell);
          if (!template.name) {
            newMessages.push(`‚ùó [–û—à–∏–±–∫–∞][processWorldLimits] –®–∞–±–ª–æ–Ω –≤ —Å—Ç—Ä–æ–∫–µ ${index + 1} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–∞ "name".`);
            return;
          }
          if (template.world_limit === undefined || template.world_limit === null) {
            newMessages.push(`‚ùó [–û—à–∏–±–∫–∞][processWorldLimits] –®–∞–±–ª–æ–Ω "${template.name}" –≤ —Å—Ç—Ä–æ–∫–µ ${index + 1} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–∞ "world_limit".`);
            return;
          }
          templates.push({ data: template, row: index });
        } catch (e) {
          newMessages.push(`‚ùó [–û—à–∏–±–∫–∞][processWorldLimits] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ JSON –∏–∑ –ü–æ—Å—Ç—Ä–æ–π–∫–∏_–®–∞–±–ª–æ–Ω—ã, —Å—Ç—Ä–æ–∫–∞ ${index + 1}: ${e.message}`);
        }
      }
    });
    
    if (templates.length === 0) {
      newMessages.push(`‚ùó [–û—à–∏–±–∫–∞][processWorldLimits] –ù–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤ –≤ –ü–æ—Å—Ç—Ä–æ–π–∫–∏_–®–∞–±–ª–æ–Ω—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.`);
      return newMessages;
    }
    
    // 5. –û–±—ä–µ–∫—Ç —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∫–ª—é—á–µ–π –∫ –ø–æ–Ω—è—Ç–Ω—ã–º —Ñ—Ä–∞–∑–∞–º
    const listKeyDescriptions = {
      'allowed_building_state': '–≤ –Ω–∞—à–∏—Ö –ø—Ä–æ–≤–∏–Ω—Ü–∏—è—Ö',
      'allowed_building_others': '–≤ –ø—Ä–æ–≤–∏–Ω—Ü–∏—è—Ö –¥—Ä—É–≥–∏—Ö –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤'
    };
    
    // 6. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
    templates.forEach(templateInfo => {
      const template = templateInfo.data;
      const templateName = template.name;
      const worldLimit = template.world_limit;
      
      if (typeof worldLimit !== 'number' || worldLimit < -1) {
        newMessages.push(`‚ùó [–û—à–∏–±–∫–∞][processWorldLimits] –®–∞–±–ª–æ–Ω "${templateName}" –∏–º–µ–µ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ "world_limit": ${worldLimit}. –î–æ–ø—É—Å—Ç–∏–º—ã –∑–Ω–∞—á–µ–Ω–∏—è -1 –∏–ª–∏ –±–æ–ª—å—à–µ.`);
        return;
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç—Ä–æ–µ–∫ –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
      const totalBuildings = buildingCounts[templateName] || 0;
      
      if (worldLimit !== -1 && totalBuildings >= worldLimit) {
        // –ï—Å–ª–∏ –ª–∏–º–∏—Ç –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –∏–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω, —É–¥–∞–ª—è–µ–º –≤—Å–µ –ø—Ä–æ–≤–∏–Ω—Ü–∏–∏ –∏–∑ allowed_building_state –∏ allowed_building_others
        ['allowed_building_state', 'allowed_building_others'].forEach(listKey => {
          if (Array.isArray(template[listKey]) && template[listKey].length > 0) {
            const removedProvinces = [...template[listKey]]; // –ö–æ–ø–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫
            
            // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫
            template[listKey] = [];
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ–≤–∏–Ω—Ü–∏–π
            const provinceIds = removedProvinces.join(', ');
            
            const description = listKeyDescriptions[listKey] || listKey;
            newMessages.push(`[–ö—Ä–∏—Ç–µ—Ä–∏–∏ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞][–õ–∏–º–∏—Ç –ø–æ—Å—Ç—Ä–æ–µ–∫ –Ω–∞ –º–∏—Ä] –ü–æ—Å—Ç—Ä–æ–π–∫–∞ üè≠ ${templateName} –±–æ–ª—å—à–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ—Å—Ç—Ä–æ–µ–Ω–∞ ${description}: üìå ${provinceIds} –∏–∑-–∑–∞ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ–≥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω–æ–π –ø–æ—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –º–∏—Ä–∞. –õ–∏–º–∏—Ç: üìä ${worldLimit} –Ω–∞ –º–∏—Ä. –ü–æ—Å—Ç—Ä–æ–µ–Ω–æ: üìä ${totalBuildings}. \n`);
          }
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —à–∞–±–ª–æ–Ω –≤ data
        try {
          data['–ü–æ—Å—Ç—Ä–æ–π–∫–∏_–®–∞–±–ª–æ–Ω—ã'][templateInfo.row][0] = JSON.stringify(template);
        } catch (e) {
          newMessages.push(`‚ùó [–û—à–∏–±–∫–∞][processWorldLimits] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ JSON –¥–ª—è —à–∞–±–ª–æ–Ω–∞ "${templateName}" –≤ —Å—Ç—Ä–æ–∫–µ ${templateInfo.row + 1}: ${e.message}`);
        }
      }
    });

  } catch (error) {
    newMessages.push(`‚ùó [–û—à–∏–±–∫–∞][processWorldLimits] processWorldLimits: ${error.message}`);
  }
  
  return newMessages;
}
