/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–¥–∞–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —à–∞–±–ª–æ–Ω–æ–≤ –∏ –ø—Ä–æ–≤–∏–Ω—Ü–∏–π.
 * 
 * –ê–ª–≥–æ—Ä–∏—Ç–º:
 * 1. –ù–∞—Ö–æ–¥–∏–º stateName –∏–∑ "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ".
 * 2. –ß–∏—Ç–∞–µ–º –≤—Å–µ —à–∞–±–ª–æ–Ω—ã –∏–∑ "–ü–æ—Å—Ç—Ä–æ–π–∫–∏_–®–∞–±–ª–æ–Ω—ã" –∏ —Å–æ–∑–¥–∞—ë–º –∫–∞—Ä—Ç—É templateMap: { [template.name]: template }.
 * 3. –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–¥–∞–Ω–∏—è –∏–∑ "–ü–æ—Å—Ç—Ä–æ–π–∫–∏_–û—Å–Ω–æ–≤–Ω–∞—è–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è":
 *    - –ï—Å–ª–∏ building_owner == stateName:
 *      - –ü–æ–ª—É—á–∞–µ–º template –ø–æ building.building_name.
 *      - –ü—Ä–æ–≤–µ—Ä—è–µ–º province_id –∑–¥–∞–Ω–∏—è –≤ template.matching_provinces_state –∏–ª–∏ template.matching_provinces_others.
 *      - –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º status = "–ê–∫—Ç–∏–≤–Ω–∞—è", –µ—Å–ª–∏ –Ω–∞—à–ª–∏, –∏–Ω–∞—á–µ "–ù–µ–∞–∫—Ç–∏–≤–Ω–∞—è".
 *      - –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
 * 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.
 * 
 * @param {Object} data - –û–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ Google Sheets.
 * @returns {Array} messages - –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∂—É—Ä–Ω–∞–ª–∞ —Å–æ–±—ã—Ç–∏–π.
 */
function updateBuildingsStatuses(data) {
  let messages = [];

  // 1. –ò–∑–≤–ª–µ–∫–∞–µ–º stateName –∏–∑ "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ"
  let stateName;
  try {
    const targetIdentifier = '–û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞';
    const rangeVars = data['–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ'] || [];
    const targetRow = rangeVars.find(row => row[0] === targetIdentifier);

    if (!targetRow || !targetRow[1]) {
      messages.push(`[–û—à–∏–±–∫–∞][updateBuildingsStatuses] –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä "${targetIdentifier}" –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç –≤ "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ".`);
      return messages;
    }

    const jsonMatch = targetRow[1].match(/\{.*\}/);
    if (!jsonMatch) {
      messages.push(`[–û—à–∏–±–∫–∞][updateBuildingsStatuses] –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å JSON –∏–∑ —Å—Ç—Ä–æ–∫–∏ "${targetIdentifier}".`);
      return messages;
    }

    const variablesJson = JSON.parse(jsonMatch[0]);
    if (!variablesJson.state_name) {
      messages.push('[–û—à–∏–±–∫–∞][updateBuildingsStatuses] –ö–ª—é—á "state_name" –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ JSON-–ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö.');
      return messages;
    }

    stateName = variablesJson.state_name;
  } catch (err) {
    messages.push(`[–û—à–∏–±–∫–∞][updateBuildingsStatuses] –ü—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ": ${err.message}`);
    return messages;
  }

  // 2. –°—á–∏—Ç—ã–≤–∞–µ–º —à–∞–±–ª–æ–Ω—ã –∏–∑ "–ü–æ—Å—Ç—Ä–æ–π–∫–∏_–®–∞–±–ª–æ–Ω—ã" –≤ map
  const templateMap = {};
  const templatesData = data['–ü–æ—Å—Ç—Ä–æ–π–∫–∏_–®–∞–±–ª–æ–Ω—ã'] || [];
  templatesData.forEach((row, rowIndex) => {
    const cell = row[0];
    if (!cell || cell.trim() === '') return;

    try {
      const templateObj = JSON.parse(cell);
      if (templateObj && templateObj.name) {
        templateMap[templateObj.name] = templateObj;
      } else {
        messages.push(`[–û—à–∏–±–∫–∞][updateBuildingsStatuses] –í —Å—Ç—Ä–æ–∫–µ ${rowIndex + 1} —à–∞–±–ª–æ–Ω –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç "name".`);
      }
    } catch (err) {
      messages.push(`[–û—à–∏–±–∫–∞][updateBuildingsStatuses] –ü–∞—Ä—Å–∏–Ω–≥ JSON –≤ —Å—Ç—Ä–æ–∫–µ ${rowIndex + 1}: ${err.message}`);
    }
  });

  // –ï—Å–ª–∏ –Ω–µ—Ç —à–∞–±–ª–æ–Ω–æ–≤ - –≤—ã—Ö–æ–¥–∏–º
  if (Object.keys(templateMap).length === 0) {
    messages.push('[–û—à–∏–±–∫–∞][updateBuildingsStatuses] –ù–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤ –≤ "–ü–æ—Å—Ç—Ä–æ–π–∫–∏_–®–∞–±–ª–æ–Ω—ã".');
    return messages;
  }

  // 3. –°—á–∏—Ç—ã–≤–∞–µ–º –∑–¥–∞–Ω–∏—è –∏–∑ "–ü–æ—Å—Ç—Ä–æ–π–∫–∏_–û—Å–Ω–æ–≤–Ω–∞—è–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
  const buildingsData = data['–ü–æ—Å—Ç—Ä–æ–π–∫–∏_–û—Å–Ω–æ–≤–Ω–∞—è–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'] || [];
  buildingsData.forEach((row, rowIndex) => {
    const cell = row[0];
    if (!cell || cell.trim() === '') return;

    let buildingsArray;
    try {
      buildingsArray = JSON.parse(cell);
    } catch (err) {
      messages.push(`[–û—à–∏–±–∫–∞][updateBuildingsStatuses] –ü–∞—Ä—Å–∏–Ω–≥ JSON –∑–¥–∞–Ω–∏–π –≤ —Å—Ç—Ä–æ–∫–µ ${rowIndex + 1}: ${err.message}`);
      return;
    }

    let updated = false;
    buildingsArray.forEach(building => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –∑–¥–∞–Ω–∏–µ –Ω–∞—à–µ–º—É –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤—É
      if (building.building_owner !== stateName) {
        return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –Ω–µ –Ω–∞—à –≤–ª–∞–¥–µ–ª–µ—Ü
      }

      // –ù–∞—Ö–æ–¥–∏–º —à–∞–±–ª–æ–Ω –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ building_name
      const buildingName = building.building_name;
      const template = templateMap[buildingName];
      if (!template) {
        messages.push(`[–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ] –î–ª—è –∑–¥–∞–Ω–∏—è "${buildingName}" –Ω–µ—Ç —à–∞–±–ª–æ–Ω–∞ –≤ "–ü–æ—Å—Ç—Ä–æ–π–∫–∏_–®–∞–±–ª–æ–Ω—ã".`);
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º province_id –∑–¥–∞–Ω–∏—è –Ω–∞ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ –≤ matching_provinces_state / matching_provinces_others
      const provinceId = building.province_id;
      const isInStateList = template.matching_provinces_state?.includes(provinceId);
      const isInOthersList = template.matching_provinces_others?.includes(provinceId);

      if (isInStateList || isInOthersList) {
        building.status = "–ê–∫—Ç–∏–≤–Ω–∞—è";
        messages.push(
          `[–ó–¥–∞–Ω–∏–µ][updateBuildingsStatuses] ‚úÖ –ó–¥–∞–Ω–∏–µ üè≠ ${buildingName} –≤ –ø—Ä–æ–≤–∏–Ω—Ü–∏–∏ üìå ${provinceId} ` +
          `–ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º –∏ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–∏ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–∏ –≤—Å–µ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ. \n`
        );
      } else {
        building.status = "–ù–µ–∞–∫—Ç–∏–≤–Ω–∞—è";
        messages.push(
          `[–ó–¥–∞–Ω–∏–µ][updateBuildingsStatuses] ‚ùå –ó–¥–∞–Ω–∏–µ üè≠ ${buildingName} –≤ –ø—Ä–æ–≤–∏–Ω—Ü–∏–∏ üìå ${provinceId} ` +
          `–Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º –∏ –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å. –ò —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º –º–æ–∂–µ—Ç —Å–∞–º–æ—É–Ω–∏—á—Ç–æ–∂–∏—Ç—å—Å—è. \n`
        );
      }

      updated = true;
    });

    // –ï—Å–ª–∏ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ –∑–¥–∞–Ω–∏–π –æ–±—Ä–∞—Ç–Ω–æ
    if (updated) {
      row[0] = JSON.stringify(buildingsArray);
    }
  });

  return messages;
}
